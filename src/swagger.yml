openapi: 3.0.0
info:
  title: "Cinema-app"
  description: "cinema-app for course-work"
  version: 0.0.1
servers:
  - url: "/api"
components:
  schemas:
    film:
      type: "object"
      properties:
        film_id:
          type: "integer"
        name:
          type: "string"
    filmsession:
      type: "object"
      properties:
        session_id:
          type: "integer"
        film_id: 
          type: "integer"
        date:
          type: "string"
    order:
      type: "object"
      properties:
        order_id: 
          type: "integer"
        customer_id:
          type: "integer"
        tickets:
          type: "array"
          items:
            type: "object"
            properties:
              ticket_id:
                type: "integer"
    customer:
      type: "object"
      properties:
        customer_id:
          type: "integer"
        first_name:
          type: "string"
        last_name: 
          type: "string"
        middle_name: 
          type: "string"
  parameters:
    film_id:
      name: "film_id"
      description: "Film id"
      in: path
      required: True
      schema:
        type: "integer"
    filmsession_id:
      name: "filmsession_id"
      description: "Filmsession id"
      in: path
      required: True
      schema:
        type: "integer"
    order_id:
      name: "order_id"
      description: "Order id"
      in: path
      required: True
      schema:
        type: "integer"
    customer_id:
      name: "customer_id"
      description: "Customer id"
      in: path
      required: True
      schema:
        type: "integer"
    ticket_id:
      name: "ticket_id"
      description: "Ticket id"
      in: path
      required: True
      schema:
        type: "integer"
  securitySchemes:
    basic:
      type: http
      scheme: basic
      x-basicInfoFunc: "controllers.AuthenticationController.authenticate"
paths:
  /films:
    get:
      operationId: "controllers.FilmsController.read_all"
      tags:
        - "films"
      summary: "Read the list of films"
      responses:
        "200":
          description: "Success"
  /films/{film_id}:
    get:
      operationId: "controllers.FilmsController.read_one"
      tags:
        - "films"
      summary: "Read one film"
      parameters:
        - $ref: "#/components/parameters/film_id"
      responses:
        "200":
          description: "Success"
  /filmsessions:
    get:
      operationId: "controllers.FilmSessionsController.read_all"
      tags:
        - "filmSessions"
      summary: "Read the list of sessions"
      responses:
        "200":
          description: "Success"
  /filmsessions/{filmsession_id}:
    get:
      operationId: "controllers.FilmSessionsController.read_one"
      tags:
        - "filmSessions"
      summary: "Read one session"
      parameters:
        - $ref: "#/components/parameters/filmsession_id"
      responses:
        "200":
          description: "Success"
  /orders:
    get:
      operationId: "controllers.OrdersController.read_all"
      tags:
        - "orders"
      summary: "Read the list of orders"
      responses:
        "200":
          description: "Success"
    post:
      operationId: "controllers.OrdersController.create"
      tags:
        - "orders"
      summary: "Create order"
      requestBody:
        description: "Order to create"
        required: True
        content:
          application/json:
            schema:
              x-body-name: "order"
              $ref: "#/components/schemas/order"
      responses:
        "201":
          description: "Successfully created order"
  /orders/{order_id}:
    get:
      operationId: "controllers.OrdersController.read_one"
      tags:
        - "orders"
      summary: "Read one order"
      parameters:
        - $ref: "#/components/parameters/order_id"
      responses:
        "200":
          description: "Success"
  /customers:
    get:
      operationId: "controllers.CustomersController.read_all"
      tags:
        - "customers"
      summary: "Read the list of customers"
      responses:
        "200":
          description: "Success"
    post:
      operationId: "controllers.CustomersController.create"
      tags:
        - "customers"
      summary: "Create a customer"
      requestBody:
        description: "Customer to create"
        required: True
        content:
          application/json:
            schema:
              x-body-name: "customer"
              $ref: "#/components/schemas/customer"
      responses:
        "201":
          description: "Successfully created customer"
  /customers/{customer_id}:
    get:
      operationId: "controllers.CustomersController.read_one"
      tags:
        - "customers"
      summary: "Read one customer"
      parameters:
        - $ref: "#/components/parameters/customer_id"
      responses:
        "200":
          description: "Success"
    post:
      operationId: "controllers.CustomersController.update"
      tags:
        - "customers"
      summary: "Update customer data"
      requestBody:
        description: "Customer to update"
        required: True
        content:
          application/json:
            schema:
              x-body-name: "customer"
              $ref: "#/components/schemas/customer"
      parameters:
        - $ref: "#/components/parameters/customer_id"
      responses:
        "201":
          description: "Successfully created customer"
  /tickets:
    get:
      operationId: "controllers.TicketsController.read_all"
      tags:
        - "tickets"
      summary: "Read the list of tickets"
      responses:
        "200":
          description: "Success"
  /tickets/{ticket_id}:
    get:
      operationId: "controllers.TicketsController.read_one"
      tags:
        - "tickets"
      summary: "Read one ticket"
      parameters:
        - $ref: "#/components/parameters/ticket_id"
      responses:
        "200":
          description: "Success"
